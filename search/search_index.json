{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to cuteagent","text":"<p>Computer Use Task Execution Agent</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://FintorAI.github.io/cuteagent</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#cuteagent.common.hello","title":"<code>hello(name)</code>","text":"<p>Prints \"Hello !\" to the console. Source code in <code>cuteagent/common.py</code> <pre><code>def hello(name: str):\n    \"\"\"Prints \"Hello &lt;name&gt;!\" to the console.\n    \"\"\"\n    print(f\"Hello {name}!\")\n</code></pre>"},{"location":"common/#cuteagent.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>cuteagent/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/MasoudJB/cuteagent/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>CuteAgent could always use more documentation, whether as part of the official CuteAgent docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/MasoudJB/cuteagent/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up cuteagent for local development.</p> <ol> <li> <p>Fork the cuteagent repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/cuteagent.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv cuteagent\n$ cd cuteagent/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 cuteagent tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/MasoudJB/cuteagent/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"cuteagent/","title":"cuteagent module","text":"<p>Main module.</p>"},{"location":"cuteagent/#cuteagent.cuteagent.HumanAgent","title":"<code> HumanAgent        </code>","text":"Source code in <code>cuteagent/cuteagent.py</code> <pre><code>class HumanAgent:\n    def __init__(self, HITL_token=HITL_TOKEN, HITL_url=HITL_URL):\n        \"\"\"\n        Initializes the HumanAgent with token and URL.\n\n        Args:\n            HITL_token (str): Authentication token\n            HITL_url (str): API endpoint URL\n        \"\"\"\n        self.HITL_token = HITL_token\n        self.HITL_url = HITL_url\n\n    def task(self,  image_urls, thread_id=\"1234567890\", questions=None, task_type=\"NotSpecified\", thread_state=None):\n        \"\"\"\n        Creates a human task with images, instructions, and questions.\n\n        Args:\n            image_urls (list): List of image URLs to display\n            instruction_markdown (str, optional): Markdown formatted instructions\n            instruction_url (str, optional): URL to instructions\n            questions (list, optional): List of question dictionaries with format:\n                {\n                    \"Question\": \"Is this green?\",\n                    \"Choices\": [\"Yes\", \"No\", \"Maybe\"],  # Optional\n                    \"TypeIn\": True  # Optional, defaults to True\n                }\n\n        Returns:\n            Response from the human task API\n        \"\"\"\n        try:\n            if not image_urls:\n                raise ValueError(\"At least one image URL is required\")\n\n            # Default empty list if questions parameter is None\n            if questions is None:\n                questions = []\n\n            # Prepare task data\n            task_data = {\n                \"type\": \"task\",\n                \"image_urls\": image_urls,\n                \"questions\": questions,\n                \"thread_id\": thread_id,\n                \"task_type\": task_type,\n                \"thread_state\": thread_state,\n            }\n\n            # Set up headers for the API request\n            headers = {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": f\"Bearer {self.HITL_token}\"\n            }\n\n            # Make the API call\n            response = requests.post(\n                self.HITL_url,\n                headers=headers,\n                data=json.dumps(task_data)\n            )\n\n            # Check if the request was successful\n            response.raise_for_status()\n\n            # Return the response from the API\n            print(f\"Task sent to {self.HITL_url} successfully\")\n            return response.json()\n\n        except requests.exceptions.RequestException as e:\n            print(f\"API request error: {e}\")\n            return None\n        except Exception as e:\n            print(f\"Error creating human task: {e}\")\n            return None\n\n    def reporting(self, thread_id=\"1234567890\", report_type=\"NotSpecified\", thread_state=None):\n            \"\"\"\n            Creates a human task with images, instructions, and questions.\n\n            Args:\n                thread_id (str): ID for the thread. Defaults to \"1234567890\"\n                thread_state (dict, optional): Dictionary containing thread state information\n\n            Returns:\n                Response from the reporting API containing thread status and any updates\n            \"\"\"\n            try:\n                task_data = {\n                    \"type\": \"reporting\",\n                    \"thread_id\": thread_id,\n                    \"thread_state\": thread_state,\n                    \"report_type\": report_type\n                }\n\n                # Set up headers for the API request\n                headers = {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": f\"Bearer {self.HITL_token}\"\n                }\n\n                # Make the API call\n                response = requests.post(\n                    self.HITL_url,\n                    headers=headers,\n                    data=json.dumps(task_data)\n                )\n\n                # Check if the request was successful\n                response.raise_for_status()\n\n                # Return the response from the API\n                print(f\"Reporting sent to {self.HITL_url} successfully\")\n                return response.json()\n\n            except requests.exceptions.RequestException as e:\n                print(f\"API request error: {e}\")\n                return None\n            except Exception as e:\n                print(f\"Error creating human reporting: {e}\")\n                return None\n</code></pre>"},{"location":"cuteagent/#cuteagent.cuteagent.HumanAgent.__init__","title":"<code>__init__(self, HITL_token=None, HITL_url='https://d5x1qrpuf7.execute-api.us-west-1.amazonaws.com/prod/')</code>  <code>special</code>","text":"<p>Initializes the HumanAgent with token and URL.</p> <p>Parameters:</p> Name Type Description Default <code>HITL_token</code> <code>str</code> <p>Authentication token</p> <code>None</code> <code>HITL_url</code> <code>str</code> <p>API endpoint URL</p> <code>'https://d5x1qrpuf7.execute-api.us-west-1.amazonaws.com/prod/'</code> Source code in <code>cuteagent/cuteagent.py</code> <pre><code>def __init__(self, HITL_token=HITL_TOKEN, HITL_url=HITL_URL):\n    \"\"\"\n    Initializes the HumanAgent with token and URL.\n\n    Args:\n        HITL_token (str): Authentication token\n        HITL_url (str): API endpoint URL\n    \"\"\"\n    self.HITL_token = HITL_token\n    self.HITL_url = HITL_url\n</code></pre>"},{"location":"cuteagent/#cuteagent.cuteagent.HumanAgent.reporting","title":"<code>reporting(self, thread_id='1234567890', report_type='NotSpecified', thread_state=None)</code>","text":"<p>Creates a human task with images, instructions, and questions.</p> <p>Parameters:</p> Name Type Description Default <code>thread_id</code> <code>str</code> <p>ID for the thread. Defaults to \"1234567890\"</p> <code>'1234567890'</code> <code>thread_state</code> <code>dict</code> <p>Dictionary containing thread state information</p> <code>None</code> <p>Returns:</p> Type Description <p>Response from the reporting API containing thread status and any updates</p> Source code in <code>cuteagent/cuteagent.py</code> <pre><code>def reporting(self, thread_id=\"1234567890\", report_type=\"NotSpecified\", thread_state=None):\n        \"\"\"\n        Creates a human task with images, instructions, and questions.\n\n        Args:\n            thread_id (str): ID for the thread. Defaults to \"1234567890\"\n            thread_state (dict, optional): Dictionary containing thread state information\n\n        Returns:\n            Response from the reporting API containing thread status and any updates\n        \"\"\"\n        try:\n            task_data = {\n                \"type\": \"reporting\",\n                \"thread_id\": thread_id,\n                \"thread_state\": thread_state,\n                \"report_type\": report_type\n            }\n\n            # Set up headers for the API request\n            headers = {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": f\"Bearer {self.HITL_token}\"\n            }\n\n            # Make the API call\n            response = requests.post(\n                self.HITL_url,\n                headers=headers,\n                data=json.dumps(task_data)\n            )\n\n            # Check if the request was successful\n            response.raise_for_status()\n\n            # Return the response from the API\n            print(f\"Reporting sent to {self.HITL_url} successfully\")\n            return response.json()\n\n        except requests.exceptions.RequestException as e:\n            print(f\"API request error: {e}\")\n            return None\n        except Exception as e:\n            print(f\"Error creating human reporting: {e}\")\n            return None\n</code></pre>"},{"location":"cuteagent/#cuteagent.cuteagent.HumanAgent.task","title":"<code>task(self, image_urls, thread_id='1234567890', questions=None, task_type='NotSpecified', thread_state=None)</code>","text":"<p>Creates a human task with images, instructions, and questions.</p> <p>Parameters:</p> Name Type Description Default <code>image_urls</code> <code>list</code> <p>List of image URLs to display</p> required <code>instruction_markdown</code> <code>str</code> <p>Markdown formatted instructions</p> required <code>instruction_url</code> <code>str</code> <p>URL to instructions</p> required <code>questions</code> <code>list</code> <p>List of question dictionaries with format: {     \"Question\": \"Is this green?\",     \"Choices\": [\"Yes\", \"No\", \"Maybe\"],  # Optional     \"TypeIn\": True  # Optional, defaults to True }</p> <code>None</code> <p>Returns:</p> Type Description <p>Response from the human task API</p> Source code in <code>cuteagent/cuteagent.py</code> <pre><code>def task(self,  image_urls, thread_id=\"1234567890\", questions=None, task_type=\"NotSpecified\", thread_state=None):\n    \"\"\"\n    Creates a human task with images, instructions, and questions.\n\n    Args:\n        image_urls (list): List of image URLs to display\n        instruction_markdown (str, optional): Markdown formatted instructions\n        instruction_url (str, optional): URL to instructions\n        questions (list, optional): List of question dictionaries with format:\n            {\n                \"Question\": \"Is this green?\",\n                \"Choices\": [\"Yes\", \"No\", \"Maybe\"],  # Optional\n                \"TypeIn\": True  # Optional, defaults to True\n            }\n\n    Returns:\n        Response from the human task API\n    \"\"\"\n    try:\n        if not image_urls:\n            raise ValueError(\"At least one image URL is required\")\n\n        # Default empty list if questions parameter is None\n        if questions is None:\n            questions = []\n\n        # Prepare task data\n        task_data = {\n            \"type\": \"task\",\n            \"image_urls\": image_urls,\n            \"questions\": questions,\n            \"thread_id\": thread_id,\n            \"task_type\": task_type,\n            \"thread_state\": thread_state,\n        }\n\n        # Set up headers for the API request\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {self.HITL_token}\"\n        }\n\n        # Make the API call\n        response = requests.post(\n            self.HITL_url,\n            headers=headers,\n            data=json.dumps(task_data)\n        )\n\n        # Check if the request was successful\n        response.raise_for_status()\n\n        # Return the response from the API\n        print(f\"Task sent to {self.HITL_url} successfully\")\n        return response.json()\n\n    except requests.exceptions.RequestException as e:\n        print(f\"API request error: {e}\")\n        return None\n    except Exception as e:\n        print(f\"Error creating human task: {e}\")\n        return None\n</code></pre>"},{"location":"cuteagent/#cuteagent.cuteagent.VisionAgent","title":"<code> VisionAgent        </code>","text":"Source code in <code>cuteagent/cuteagent.py</code> <pre><code>class VisionAgent:\n    def __init__(self,screen_size=(1366, 768), model_selected=\"FINTOR_GUI\", hf_fintor_gui_endpoint=HF_FINTOR_GUI_ENDPOINT, hf_token=HF_TOKEN):\n        \"\"\"\n        Initializes the Vision class with a configurable variable name and OS URL.\n\n        Args:\n            variable_name (str): The name to use for configuration.\n                                Defaults to \"friend\".\n            os_url (str): The URL for OS operations.\n                        Defaults to OS_URL.\n        \"\"\"\n        self.hf_fintor_gui_endpoint = hf_fintor_gui_endpoint\n        self.hf_token = hf_token\n        self.model_selected = model_selected\n        self.screen_size = screen_size\n\n    def find_element(self, screenshot_url, element_name):\n        try:\n            if self.model_selected != \"FINTOR_GUI\":\n                raise ValueError(\"We only support FINTOR_GUI for now!\")\n\n            print(\"Element name in find_element\", element_name)\n\n            print(\"Screenshot url in find_element\", screenshot_url)\n            client = OpenAI(\n                base_url = self.hf_fintor_gui_endpoint,   \n                api_key = self.hf_token\n            )\n            _NAV_SYSTEM_GROUNDING = \"\"\"\n            You are a GUI agent. You are given a task and your action history, with screenshots. You need to perform the next action to complete the task. \n\n            ## Output Format\n            ```Action: ...```\n\n            ## Action Space\n            click(start_box='&lt;|box_start|&gt;(x1,y1)&lt;|box_end|&gt;')\n            hotkey(key='')\n            type(content='') #If you want to submit your input, use \\\"\\\" at the end of `content`.\n            scroll(start_box='&lt;|box_start|&gt;(x1,y1)&lt;|box_end|&gt;', direction='down or up or right or left')\n            wait() #Sleep for 5s and take a screenshot to check for any changes.\n            finished()\n            call_user() # Submit the task and call the user when the task is unsolvable, or when you need the user's help.\n\n            ## Note\n            - Do not generate any other text.\n            \"\"\"\n\n            chat_completion = client.chat.completions.create(\n                model=\"tgi\",\n                messages=[\n                {\"role\": \"system\", \"content\": _NAV_SYSTEM_GROUNDING},\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\"type\": \"image_url\", \"image_url\": {\"url\": screenshot_url}},\n                        {\n                            \"type\": \"text\",\n                            \"text\": element_name\n                        }\n                    ]\n                }\n            ],\n                top_p=None,\n                temperature=0,\n                max_tokens=150,\n                stream=True,\n                seed=None,\n                stop=None,\n                frequency_penalty=None,\n                presence_penalty=None\n            )\n            word_buffer = \"\"\n            full_text = []\n\n            for message in chat_completion:\n                chunk = message.choices[0].delta.content\n                if chunk:\n                    word_buffer += chunk\n                    words = word_buffer.split()\n                    full_text.extend(words[:-1])\n                    word_buffer = words[-1] if words else \"\"\n\n            if word_buffer:\n                full_text.append(word_buffer)\n\n            final_text = \" \".join(full_text)\n            print(\"final_text\", final_text)\n            pattern = r\"\\(\\d+,\\d+\\)\"\n\n            matches = re.findall(pattern, final_text)\n            print(\"matches\", matches)\n\n            if matches:\n                if len(matches) == 1:\n                    extracted_coordinates = matches[0]\n                elif len(matches) == 2:\n                    # Parse the two coordinate pairs\n                    coord1 = matches[0].strip('()')\n                    coord2 = matches[1].strip('()')\n                    x1, y1 = map(int, coord1.split(','))\n                    x2, y2 = map(int, coord2.split(','))\n\n                    # Average the coordinates\n                    avg_x = (x1 + x2) // 2\n                    avg_y = (y1 + y2) // 2\n                    extracted_coordinates = f\"({avg_x},{avg_y})\"\n                else:\n                    # If more than 2 matches, use the first one\n                    extracted_coordinates = matches[0]\n\n\n                extracted_coordinates = self.convert_coordinates(extracted_coordinates)\n                if extracted_coordinates:\n                    return extracted_coordinates\n            else:\n                return \"NOT FOUND\"\n        except Exception as e:\n            print(f\"Error in ui_tars_coordinates: {e}\")\n            return None\n\n    def convert_coordinates(self, coordinates_str):\n        \"\"\"\n        Convert coordinates based on screen size ratio (screen_size/1000).\n\n        Args:\n            coordinates_str (str): String in format \"(x,y)\"\n\n        Returns:\n            str: Converted coordinates in same format\n        \"\"\"\n        try:\n            # Strip parentheses and split by comma\n            coords = coordinates_str.strip('()')\n            x, y = map(int, coords.split(','))\n\n            # Convert coordinates based on screen ratio\n            x_ratio = self.screen_size[0] / 1000\n            y_ratio = self.screen_size[1] / 1000\n\n            new_x = int(x * x_ratio)\n            new_y = int(y * y_ratio)\n\n            return f\"({new_x},{new_y})\"\n        except Exception as e:\n            print(f\"Error converting coordinates: {e}\")\n            return coordinates_str\n</code></pre>"},{"location":"cuteagent/#cuteagent.cuteagent.VisionAgent.__init__","title":"<code>__init__(self, screen_size=(1366, 768), model_selected='FINTOR_GUI', hf_fintor_gui_endpoint='https://jtpozbeohnafofam.us-east-1.aws.endpoints.huggingface.cloud/v1/', hf_token=None)</code>  <code>special</code>","text":"<p>Initializes the Vision class with a configurable variable name and OS URL.</p> <p>Parameters:</p> Name Type Description Default <code>variable_name</code> <code>str</code> <p>The name to use for configuration.                 Defaults to \"friend\".</p> required <code>os_url</code> <code>str</code> <p>The URL for OS operations.         Defaults to OS_URL.</p> required Source code in <code>cuteagent/cuteagent.py</code> <pre><code>def __init__(self,screen_size=(1366, 768), model_selected=\"FINTOR_GUI\", hf_fintor_gui_endpoint=HF_FINTOR_GUI_ENDPOINT, hf_token=HF_TOKEN):\n    \"\"\"\n    Initializes the Vision class with a configurable variable name and OS URL.\n\n    Args:\n        variable_name (str): The name to use for configuration.\n                            Defaults to \"friend\".\n        os_url (str): The URL for OS operations.\n                    Defaults to OS_URL.\n    \"\"\"\n    self.hf_fintor_gui_endpoint = hf_fintor_gui_endpoint\n    self.hf_token = hf_token\n    self.model_selected = model_selected\n    self.screen_size = screen_size\n</code></pre>"},{"location":"cuteagent/#cuteagent.cuteagent.VisionAgent.convert_coordinates","title":"<code>convert_coordinates(self, coordinates_str)</code>","text":"<p>Convert coordinates based on screen size ratio (screen_size/1000).</p> <p>Parameters:</p> Name Type Description Default <code>coordinates_str</code> <code>str</code> <p>String in format \"(x,y)\"</p> required <p>Returns:</p> Type Description <code>str</code> <p>Converted coordinates in same format</p> Source code in <code>cuteagent/cuteagent.py</code> <pre><code>def convert_coordinates(self, coordinates_str):\n    \"\"\"\n    Convert coordinates based on screen size ratio (screen_size/1000).\n\n    Args:\n        coordinates_str (str): String in format \"(x,y)\"\n\n    Returns:\n        str: Converted coordinates in same format\n    \"\"\"\n    try:\n        # Strip parentheses and split by comma\n        coords = coordinates_str.strip('()')\n        x, y = map(int, coords.split(','))\n\n        # Convert coordinates based on screen ratio\n        x_ratio = self.screen_size[0] / 1000\n        y_ratio = self.screen_size[1] / 1000\n\n        new_x = int(x * x_ratio)\n        new_y = int(y * y_ratio)\n\n        return f\"({new_x},{new_y})\"\n    except Exception as e:\n        print(f\"Error converting coordinates: {e}\")\n        return coordinates_str\n</code></pre>"},{"location":"cuteagent/#cuteagent.cuteagent.WindowsAgent","title":"<code> WindowsAgent        </code>","text":"Source code in <code>cuteagent/cuteagent.py</code> <pre><code>class WindowsAgent:\n    def __init__(self, variable_name=\"friend\" , os_url=OS_URL):\n        \"\"\"\n        Initializes the WindowsAgent with a configurable variable name.\n\n        Args:\n            variable_name (str): The name to be used by hello_old_friend.\n                                 Defaults to \"friend\".\n        \"\"\"\n        self.config_variable_name = variable_name\n        self.os_url = os_url\n\n    def hello_world(self):\n        \"\"\"Prints a hello world message.\"\"\"\n        print(\"Hello World from WindowsAgent!\")\n\n    def hello_old_friend(self):\n        \"\"\"Prints a greeting to the configured variable name.\"\"\"\n        print(f\"Hello, my old {self.config_variable_name}!\")\n\n    def add(self, a, b):\n        \"\"\"Adds two numbers and returns the result.\"\"\"\n        return a + b\n\n    def act(self, input_data):\n        try:\n            client = Client(self.os_url) \n            result = client.predict(\n                user_input=str(input_data),\n                api_name=\"/process_input1\"\n            )\n            print(result)\n        except Exception as e:\n            print(f\"Error in act operation: {e}\")\n            return None\n\n    def click_element(self, x: int, y: int):\n        \"\"\"Click at the specified coordinates.\n\n        Args:\n            x (int): X coordinate\n            y (int): Y coordinate\n        \"\"\"\n        try:\n            if not isinstance(x, (int, float)) or not isinstance(y, (int, float)):\n                raise ValueError(\"Coordinates must be numbers\")\n\n            input_data = {\n                \"action\": \"CLICK\",\n                \"coordinate\": [int(x), int(y)],\n                \"value\": \"value\",\n                \"model_selected\": \"claude\"\n            }\n\n            client = Client(self.os_url)\n            result = client.predict(\n                user_input=str(input_data),\n                api_name=\"/process_input1\"\n            )\n            print(result)\n            return result\n        except Exception as e:\n            print(f\"Error in click operation: {e}\")\n            return None\n\n    def screenshot(self):\n        try:\n            client = Client(self.os_url) \n            result = client.predict(\n                api_name=\"/get_screenshot_url\"\n            )\n            print(result)\n            return result\n        except Exception as e:\n            print(f\"Error in act operation: {e}\")\n            return result\n\n\n    def screenshot_cropped(self, arr_input):\n        try:\n            client = Client(self.os_url) \n            result = client.predict(\n                array_input=arr_input,\n                api_name=\"/get_cropped_screenshot\"\n            )\n            print(result)\n            return result\n        except Exception as e:\n            print(f\"Error in act operation: {e}\")\n            return result\n\n    def pause(self, seconds: float):\n        \"\"\"Pauses execution for the specified number of seconds.\n\n        Args:\n            seconds (float): Number of seconds to pause\n        \"\"\"\n        try:\n            if not isinstance(seconds, (int, float)) or seconds &lt; 0:\n                raise ValueError(\"Seconds must be a non-negative number\")\n\n            time.sleep(seconds)\n            return True\n        except Exception as e:\n            print(f\"Error in pause operation: {e}\")\n            return False\n</code></pre>"},{"location":"cuteagent/#cuteagent.cuteagent.WindowsAgent.__init__","title":"<code>__init__(self, variable_name='friend', os_url='https://fintor-cute-test-1.ngrok.app')</code>  <code>special</code>","text":"<p>Initializes the WindowsAgent with a configurable variable name.</p> <p>Parameters:</p> Name Type Description Default <code>variable_name</code> <code>str</code> <p>The name to be used by hello_old_friend.                  Defaults to \"friend\".</p> <code>'friend'</code> Source code in <code>cuteagent/cuteagent.py</code> <pre><code>def __init__(self, variable_name=\"friend\" , os_url=OS_URL):\n    \"\"\"\n    Initializes the WindowsAgent with a configurable variable name.\n\n    Args:\n        variable_name (str): The name to be used by hello_old_friend.\n                             Defaults to \"friend\".\n    \"\"\"\n    self.config_variable_name = variable_name\n    self.os_url = os_url\n</code></pre>"},{"location":"cuteagent/#cuteagent.cuteagent.WindowsAgent.add","title":"<code>add(self, a, b)</code>","text":"<p>Adds two numbers and returns the result.</p> Source code in <code>cuteagent/cuteagent.py</code> <pre><code>def add(self, a, b):\n    \"\"\"Adds two numbers and returns the result.\"\"\"\n    return a + b\n</code></pre>"},{"location":"cuteagent/#cuteagent.cuteagent.WindowsAgent.click_element","title":"<code>click_element(self, x, y)</code>","text":"<p>Click at the specified coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>X coordinate</p> required <code>y</code> <code>int</code> <p>Y coordinate</p> required Source code in <code>cuteagent/cuteagent.py</code> <pre><code>def click_element(self, x: int, y: int):\n    \"\"\"Click at the specified coordinates.\n\n    Args:\n        x (int): X coordinate\n        y (int): Y coordinate\n    \"\"\"\n    try:\n        if not isinstance(x, (int, float)) or not isinstance(y, (int, float)):\n            raise ValueError(\"Coordinates must be numbers\")\n\n        input_data = {\n            \"action\": \"CLICK\",\n            \"coordinate\": [int(x), int(y)],\n            \"value\": \"value\",\n            \"model_selected\": \"claude\"\n        }\n\n        client = Client(self.os_url)\n        result = client.predict(\n            user_input=str(input_data),\n            api_name=\"/process_input1\"\n        )\n        print(result)\n        return result\n    except Exception as e:\n        print(f\"Error in click operation: {e}\")\n        return None\n</code></pre>"},{"location":"cuteagent/#cuteagent.cuteagent.WindowsAgent.hello_old_friend","title":"<code>hello_old_friend(self)</code>","text":"<p>Prints a greeting to the configured variable name.</p> Source code in <code>cuteagent/cuteagent.py</code> <pre><code>def hello_old_friend(self):\n    \"\"\"Prints a greeting to the configured variable name.\"\"\"\n    print(f\"Hello, my old {self.config_variable_name}!\")\n</code></pre>"},{"location":"cuteagent/#cuteagent.cuteagent.WindowsAgent.hello_world","title":"<code>hello_world(self)</code>","text":"<p>Prints a hello world message.</p> Source code in <code>cuteagent/cuteagent.py</code> <pre><code>def hello_world(self):\n    \"\"\"Prints a hello world message.\"\"\"\n    print(\"Hello World from WindowsAgent!\")\n</code></pre>"},{"location":"cuteagent/#cuteagent.cuteagent.WindowsAgent.pause","title":"<code>pause(self, seconds)</code>","text":"<p>Pauses execution for the specified number of seconds.</p> <p>Parameters:</p> Name Type Description Default <code>seconds</code> <code>float</code> <p>Number of seconds to pause</p> required Source code in <code>cuteagent/cuteagent.py</code> <pre><code>def pause(self, seconds: float):\n    \"\"\"Pauses execution for the specified number of seconds.\n\n    Args:\n        seconds (float): Number of seconds to pause\n    \"\"\"\n    try:\n        if not isinstance(seconds, (int, float)) or seconds &lt; 0:\n            raise ValueError(\"Seconds must be a non-negative number\")\n\n        time.sleep(seconds)\n        return True\n    except Exception as e:\n        print(f\"Error in pause operation: {e}\")\n        return False\n</code></pre>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install CuteAgent, run this command in your terminal:</p> <pre><code>pip install cuteagent\n</code></pre> <p>This is the preferred method to install CuteAgent, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install CuteAgent from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/MasoudJB/cuteagent\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use CuteAgent in a project:</p> <pre><code>import cuteagent\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"}]}